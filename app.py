# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OxOD8AbB0U71ySWrYS2GKVQ0T-nT8k4e
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
import joblib
import os

# Load data
@st.cache_data
def load_data():
    df = pd.read_csv("Employee.csv")
    return df

df = load_data()

st.title("üè¢ Employee Attrition Prediction App")
st.write("Predict whether an employee will **Leave or Not** based on their information.")

# Preprocess data
X = df.drop("LeaveOrNot", axis=1)
y = df["LeaveOrNot"]

# Encode categorical columns if any
for col in X.select_dtypes(include="object").columns:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])

# Train model (or load if already saved)
if not os.path.exists("employee_model.pkl"):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)
    joblib.dump(model, "employee_model.pkl")
else:
    model = joblib.load("employee_model.pkl")

# Sidebar input
st.sidebar.header("Enter Employee Features")
user_input = {}
for col in X.columns:
    if df[col].dtype == "object":
        options = df[col].unique().tolist()
        user_input[col] = st.sidebar.selectbox(col, options)
    else:
        min_val, max_val = int(df[col].min()), int(df[col].max())
        user_input[col] = st.sidebar.slider(col, min_val, max_val, int(df[col].mean()))

# Convert user input to DataFrame
input_df = pd.DataFrame([user_input])

# Encode input data same way
for col in input_df.select_dtypes(include="object").columns:
    le = LabelEncoder()
    input_df[col] = le.fit_transform(input_df[col])

# Align with training columns
input_df = input_df.reindex(columns=X.columns, fill_value=0)

# Prediction
if st.button("üîÆ Predict"):
    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1]

    st.subheader("Prediction Result")
    st.write("Employee will **Leave**" if prediction == 1 else "Employee will **Stay**")
    st.write(f"Confidence: {probability:.2f}")